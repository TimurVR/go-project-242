name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.3"
          cache: true  

      - name: Install dependencies
        run: |
          # Устанавливаем golangci-lint
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.57.2
          
          # Устанавливаем tree для отладки
          sudo apt-get update && sudo apt-get install -y tree

      - name: Debug testdata structure
        run: |
          echo "=== Testdata Structure ==="
          tree -ah --du testdata
          echo "=== File Sizes ==="
          find testdata -type f -exec du -ah {} \;

      - name: Run tests
        run: |
          # Чистим кэш тестов
          go clean -testcache
          
          # Запускаем тесты с подробным выводом
          go test -v ./testdata
          test_exit=$?
          
          # Дополнительная диагностика при ошибке
          if [ $test_exit -ne 0 ]; then
            echo "=== DEBUG: Directory Contents ==="
            find testdata -type f -exec ls -la {} \;
          fi
          exit $test_exit

      - name: Run linter
        run: |
          echo "GolangCI-Lint version:"
          golangci-lint --version
          golangci-lint run -v

      - name: Build
        run: |
          make build
          echo "Build successful, binary info:"
          ./bin/hexlet-path-size --version || true

      - name: Generate coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
          
          # Загружаем отчёт как артефакт
          if [ -f coverage.html ]; then
            echo "Coverage report generated"
          fi

    
    artifacts:
      paths:
        - coverage.html
        - bin/hexlet-path-size